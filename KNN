import numpy as np
import matplotlib.pyplot as plt
from sklearn.neighbors import BallTree, KDTree
import time
#
# #Training set
train_data = np.load('/Users/juancarlos/Downloads/NN_MNIST/MNIST/train_data.npy')
train_labels = np.load('/Users/juancarlos/Downloads/NN_MNIST/MNIST/train_labels.npy')
#
# #Test set
test_data = np.load('/Users/juancarlos/Downloads/NN_MNIST/MNIST/test_data.npy')
test_labels = np.load('/Users/juancarlos/Downloads/NN_MNIST/MNIST/test_labels.npy')

#
# #Print out their dimensions
#print('Training dataset dimensions:', np.shape(train_data))
print('Number of training labels:', len(train_labels))
#print('Test dataset dimensions:', np.shape(test_data))
print('Number of testing labels:', len(test_labels))
#
# #Number of examples of each digit
train_digits, train_counts = np.unique(train_labels,return_counts=True)
#print('Training set distribution:')
#print(dict(zip(train_digits,train_counts)))
#
test_digits, test_counts = np.unique(test_labels,return_counts=True)
#print('Testing set distribution:')
#print(dict(zip(test_digits,test_counts)))
#
# #Define function that displays digit given its vector representation
def show_digit(x):
     plt.axis('off')
     plt.imshow(x.reshape((28,28)),cmap= plt.cm.gray)
     plt.show()
     return
#
# #Define function that takes index into a particular data set(Train or test) and displays image
def vis_image(index,dataset='train'):
     if(dataset=='train'):
         show_digit(train_data[index])
         label = train_labels[index]
     else:
         show_digit(test_data[index])
         label = test_labels[index]
     print('Label '+ str(label))
     return
# #View the first data point in the training set
#vis_image(4,'train')
# #View the first data point in the testing set
#vis_image(7,'train')
#
# #Computes squared Euclidean distance between two vectors
def squared_dist(x,y):
     return np.sum(np.square(x-y))
# #Compute distance between seven and a one in our training set
#print('Distance from 7 to 1: ', squared_dist(train_data[4,: ],train_data[5,: ]))
#print('Distance from 7 to 2: ',squared_dist(train_data[4,],train_data[1,]))
#print('Distance from 7 to 7: ',squared_dist(train_data[4,],train_data[7,]))
#
# #Computing nearest neighbors
# #Takes a vector x and returns the index of its nearest neighbor in train_data
# #Which will indicate the nearest number image in this case
def find_NN(x):
#Compute distances from x to every row in train_data
     distances =[squared_dist(x,train_data[i,:]) for i in range(len(train_labels))]
     return np.argmin(distances) #minimum distance
#
# #Takes a vector x and returns the class of its nearest neighbor in train_data
def NN_classifier(x):
     index = find_NN(x)
     #Return its class
     return train_labels[index]
#
# ##A successful case
print('A sucess case: ')
print('NN classification: ', NN_classifier(test_data[40,]))
print('True label:' , test_labels[40])
print('The test image:')
vis_image(40,'test')
print('The corresponding nearest neighbor image:')
vis_image(find_NN(test_data[40, ]),'train')
#
